What happens when you initialize a repository? Why do you need to do it?

	Git creates new hidden directory ".git" and put there some metadata files
	that describe information about repository and it files.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	I think Staging area contains metadata about files while directory and 
	the repository contains real data.

How can you use the staging area to make sure you have one commit per logical
change?

	You can use 'git diff --staged' to explore changed files and lines of code
	so you can see if made changes relate to one logical improvement.
	
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	You can use branches when you need to add some experimental functions that
	you don't know at the moment whether you add them to the application or not.
	Also when you need to change some behavior to create separete version of 
	application. Also when you need to add some module that will be developed 
	for a long time.

How do the diagrams help you visualize the branch structure?

	The diagrams visualize each node (commit) with its parent node so we can see 
	branche structure.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The result is a new vesion of project that contains all changes to all files
	in the selected branch. 
	To show all relations between commits.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	I think automatic merging save a lot of developer's time so he can be more
	efficient but to use it correctly developer must know how it exactly works 
	otherwise some errors might arise. In case of manually merging it take a lot 
	of time but it must be allways without errors that developer can't control.